
service: NestJsServerless

plugins:
  - serverless-layers
  - serverless-offline
    
provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, self:custom.defaultStage}
  timeout: 30
  memorySize: 128
  versionFunctions: false
  region: us-west-2
  deploymentBucket:
    name: nestjs-lambda-layers-nakatayuki
  iam.role.statements:
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
        - rds-data:*
        - ec2:CreateNetworkInterface
        - ec2:DescribeNetworkInterfaces
        - ec2:DeleteNetworkInterface
      Resource: "*"
  environment:
    TZ: Asia/Tokyo

custom:
  defaultStage: dev
  # serverless-layers:
    # layersDeploymentBucket: nestjs-lambda-layers-nakatayuki
  # environments: ${file(./config/config.${opt:stage, self:custom.defaultStage}.yml)}
  # secret: ${file(./config/secret/.secret.${opt:stage, self:custom.defaultStage}.yml)}
  secret: ${file(./config/secret/.secret.${opt:stage, self:custom.defaultStage}.yml)}

package:
  individually: true
  include:
    - dist/**
  exclude:
    - '**'

functions:
  LmandaFunc:
    name: unicorn-delivery-api-${self:provider.stage}
    handler: dist/handler.handler
    vpc:
      securityGroupIds:
        - !Ref LambdaSecurityGroup
      subnetIds:
        - !Ref PrivateSubnet
    events:
      - http:
          path: '/'
          method: any
      - http:
          path: '{proxy+}'
          method: any

resources:
  Resources:
    # VPC:
    #   Type: AWS::EC2::VPC
    #   DeletionPolicy: Delete
    #   Properties:
    #     CidrBlock: 10.1.0.0/16
    #     Tags:
    #       - Key: Name
    #         Value: VPC
    #       - Key: App
    #         Value: UnicornDelivery
    InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: Name
            Value: InternetGateway
          - Key: App
            Value: UnicornDelivery
    VPCGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId: !Ref VPC
        InternetGatewayId: !Ref InternetGateway
    ElasticIp:
      Type: AWS::EC2::EIP
      Properties:
        Domain: vpc
        Tags:
          - Key: Name
            Value: ElasticIpElasticIp
          - Key: App
            Value: UnicornDelivery
    DeliveryNatGateway:
      DependsOn: ElasticIp
      Type: AWS::EC2::NatGateway
      Properties:
        AllocationId: !GetAtt ElasticIp.AllocationId
        SubnetId: !Ref PublicSubnet
        Tags:
          - Key: Name
            Value: DeliveryNatGateway
          - Key: App
            Value: UnicornDelivery
    PrivateSubnet:
      DependsOn: VPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        # AvailabilityZone: ${self:provider.region}a
        CidrBlock: 10.1.1.0/24
    PrivateRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
        Tags:
          - Key: Name
            Value: PrivateRouteTable
          - Key: App
            Value: UnicornDelivery
    PrivateRoute:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref PrivateRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref DeliveryNatGateway
    SubnetRouteTableAssociationPrivateSubnet:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PrivateSubnet
        RouteTableId: !Ref PrivateRouteTable
    PublicSubnet:
      DependsOn: VPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        # AvailabilityZone: ${self:provider.region}a
        CidrBlock: 10.1.11.0/24
        Tags:
          - Key: Name
            Value: yuki-nakata
          - Key: App
            Value: UnicornDelivery
    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
        Tags:
          - Key: Name
            Value: yuki-nakata
          - Key: App
            Value: UnicornDelivery
    PublicRoute:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway
    SubnetRouteTableAssociationPublicSubnet:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnet
        RouteTableId: !Ref PublicRouteTable
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      DeletionPolicy: Delete
      Properties:
        EndpointConfiguration:
          Types:
            - REGIONAL
        Name: ${self:service}-${self:provider.stage}
        Tags:
          - Key: App
            Value: UnicornDelivery
    LambdaSecurityGroup:
      DependsOn: VPC
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SecurityGroup for UnicornDelivery Functions
        VpcId: !Ref VPC
        Tags:
          - Key: App
            Value: UnicornDelivery
    AuroraSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SecurityGroup for Aurora
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 3306
            ToPort: 3306
            CidrIp: 10.0.0.0/24
        Tags:
          - Key: "Name"
            Value: "AuroraSecurityGroup"
          - Key: App
            Value: UnicornDelivery
      DependsOn: VPC